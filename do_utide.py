import utide as ut
import numpy as np
import pandas as pd
import datetime as datetime

"""
Functions to make the process of performing harmonic analysis w u-tide a little more seamless at multiple locations.
- Functions loop through desired locations, perform harmonic analysis and/or harmonic reconstruction at each location,
    and return dataframes containing harmonic coefficients and/or reconstructed time series

Provides functions:
    - solveCoefs: grab data from dictionary, return u-tide coefficients and reconstructed time series for each location

TO-DO:
    - Add region options (ex. FORCE CLA) so user doesn't have to specify huge list of points

Lilli Enders (lilli.enders@outlook.com)
June 2022
"""

def solveCoefs(dataDict, locs=None):
    """
    Solve harmonic constituents using u-tide at specified locations
    Inputs:
    - dataDict: Dictionary of data (from radar, model, ADCP) from getdata functions
    - locs (optional): Array of locations to fit constituents at (lon, lat format). If locs = [], calculate coefs at all locations on grid
    Returns:
    - coefs: List of dictionaries generated by u-tide, each dictionary contains harmonic constituents
    - dataDict: Dictionary of data with reconstructed time series of u,v,speed added
    """
    temp = {} # Temporary dictionary, for u-tide input
    coefs = [] # Initialize array for coefficients to live
    #keys_to_extract = ['name', 'Lsmaj', 'Lsmaj_ci', 'Lsmin', 'Lsmin_ci', 'g', 'g_ci', 'theta', 'theta_ci']
    ut_temp = np.zeros((len(dataDict['timeReg']),len(dataDict['lat']),len(dataDict['lon'])))
    vt_temp = np.zeros((len(dataDict['timeReg']), len(dataDict['lat']), len(dataDict['lon'])))
    M2_grid = np.empty((len(dataDict['lat']), len(dataDict['lon'])))
    M2_grid[:] = np.nan
    if locs == None:
        # Loop through all pair combos, perform u-tide and store in coefs
        for i in range(len(dataDict['lon'])):
            for j in range(len(dataDict['lat'])):
                temp['lat'] = dataDict['lat'][j]
                temp['lon'] = dataDict['lon'][i]
                temp['u'] = dataDict['u'][:,j,i]
                temp['v'] = dataDict['u'][:,j,i]
                #if np.all(np.isnan(temp['u'])) == True or np.all(np.isnan(temp['v'])) == True:
                if np.count_nonzero(np.isnan(temp['u'])) > 900 or np.count_nonzero(np.isnan(temp['v'])) > 900:
                    coef = {}
                else:
                    coef = ut.solve(dataDict['time'],temp['u'],temp['v'],
                                lat=temp['lat'],conf_int='linear',epoch='python')
                    ut_velocities = ut.reconstruct(dataDict['timeReg'], coef, epoch='python')
                    ut_temp[:, j, i] = ut_velocities['u']
                    vt_temp[:, j, i] = ut_velocities['v']
                    M2_grid[j, i] = coef['Lsmaj'][0]

                coefs.append(coef)
        dataDict['ut'] = ut_temp
        dataDict['vt'] = vt_temp
        dataDict['st'] = np.sqrt(np.square(dataDict['ut']) + np.square(dataDict['vt']))
        dataDict['M2Grid'] = M2_grid
    else:
        for i, j in locs:
            # Loop through specified pairs, perform u-tide and store in coefs
            lonidx = np.abs(dataDict['lon']-i).argmin()
            latidx = np.abs(dataDict['lat']-j).argmin()
            temp['lon'] = dataDict['lon'][lonidx]
            temp['lat'] = dataDict['lat'][latidx]
            temp['u'] = dataDict['u'][:, latidx, lonidx]
            temp['v'] = dataDict['u'][:, latidx, lonidx]
            if np.all(np.isnan(temp['u'])) == True or np.all(np.isnan(temp['v'])) == True:
                coef = {}
            else:
                coef = ut.solve(dataDict['time'], temp['u'], temp['v'],
                                lat=temp['lat'], conf_int='linear', epoch='python')
                ut_velocities = ut.reconstruct(dataDict['timeReg'], coef, epoch='python')
                ut_temp[:,latidx,lonidx]=ut_velocities['u']
                vt_temp[:, latidx, lonidx] = ut_velocities['v']
                M2_grid[latidx, lonidx] = coef['Lsmaj'][0]
            coefs.append(coef)
        dataDict['ut'] = ut_temp
        dataDict['vt'] = vt_temp
        dataDict['st'] = np.sqrt(np.square(dataDict['ut'])+np.square(dataDict['vt']))
        dataDict['M2Grid'] = M2_grid

    return dataDict,coefs

